Initializing Describe Compiler v0.9.2
GOLD parser engine initialized
Verbosity set to: High
Preloaded grammar: "Decorators v0.9"
Loaded new grammar: "Links v0.8"
------------------------
Starting a parse operation on file: "C:\Users\Viktor Chernev\Desktop\World-Describe\DataLists\Documentation\GrammarTests\v 0.8 Links\testfile - cyrillic.ds"
Fetched file contents - 1108 characters long

Parsing sequence: T(Text); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Whitespace); T(LeftArrow); R(text-chunk); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text); T(Text); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(RightArrow); R(text-chunk); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text); T(Whitespace); T(Hyphen); R(tag); R(item); T(RightArrow); T(NewLine); T(NewLine); T(Whitespace); T(Text); R(producer); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Whitespace); T(LeftArrow); R(text-chunk); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text); T(Text); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(RightArrow); R(text-chunk); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text); T(Link); R(tag); T(Separator); R(item); T(NewLine); T(Whitespace); T(Text); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Whitespace); T(LeftArrow); R(text-chunk); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text); T(Text); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(RightArrow); R(text-chunk); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text); T(Link); R(tag); T(Separator); R(item); T(NewLine); T(Whitespace); T(Text); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Whitespace); T(LeftArrow); R(text-chunk); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text); T(Text); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(RightArrow); R(text-chunk); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text); T(Separator); R(tag); R(item); T(NewLine); T(Whitespace); T(Text); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Whitespace); T(LeftArrow); R(text-chunk); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text); T(Text); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(Text); R(text-chunk); T(EscapeTerminator); R(text-chunk); T(RightArrow); R(text-chunk); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text-chunk-list); R(text); T(Terminator); R(tag); R(item); R(item-or-expression-list); R(item-or-expression-list); R(item-or-expression-list); T(NewLine); T(EOF); R(expression); R(scripture); Accepted;

File parsed successfuly
Parse tree unfolded successfuly
Done!
------------------------
1 files parsed.
Parser red 241 tokens in 428 reductions.
Those were translated to 1 productions, containing 5 entries.