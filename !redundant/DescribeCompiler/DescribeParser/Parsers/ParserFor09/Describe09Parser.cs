//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Describe09.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Describe09Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINE_COMMENT=1, BLOCK_COMMENT=2, TAG=3, LINK=4, DECORATOR=5, HYPHEN=6, 
		RIGHT_ARROW=7, LEFT_ARROW=8, RIGHT_SQUARE=9, RIGHT_CURL=10, SEPARATOR=11, 
		TERMINATOR=12, FORWARD_SLASHES=13, FORWARD_SLASH=14, STAR=15, ESCAPE_ESCAPE=16, 
		ESCAPE_HYPHEN=17, ESCAPE_RIGHT_ARROW=18, ESCAPE_LEFT_ARROW=19, ESCAPE_RIGHT_SQUARE=20, 
		ESCAPE_LEFT_SQUARE=21, ESCAPE_RIGHT_CURL=22, ESCAPE_LEFT_CURL=23, ESCAPE_SEPARATOR=24, 
		ESCAPE_TERMINATOR=25, ESCAPE_LCOMMENT=26, ESCAPE_BCOMMENT=27, ESCAPE=28, 
		DATA=29;
	public const int
		RULE_producer = 0, RULE_text_chunk = 1, RULE_item = 2, RULE_expression = 3, 
		RULE_item_or_expression_part = 4, RULE_item_or_expression_list = 5, RULE_expression_list = 6, 
		RULE_scripture = 7;
	public static readonly string[] ruleNames = {
		"producer", "text_chunk", "item", "expression", "item_or_expression_part", 
		"item_or_expression_list", "expression_list", "scripture"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINE_COMMENT", "BLOCK_COMMENT", "TAG", "LINK", "DECORATOR", "HYPHEN", 
		"RIGHT_ARROW", "LEFT_ARROW", "RIGHT_SQUARE", "RIGHT_CURL", "SEPARATOR", 
		"TERMINATOR", "FORWARD_SLASHES", "FORWARD_SLASH", "STAR", "ESCAPE_ESCAPE", 
		"ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", "ESCAPE_LEFT_ARROW", "ESCAPE_RIGHT_SQUARE", 
		"ESCAPE_LEFT_SQUARE", "ESCAPE_RIGHT_CURL", "ESCAPE_LEFT_CURL", "ESCAPE_SEPARATOR", 
		"ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", "ESCAPE", "DATA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Describe09.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Describe09Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Describe09Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Describe09Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProducerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYPHEN() { return GetToken(Describe09Parser.HYPHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ARROW() { return GetToken(Describe09Parser.RIGHT_ARROW, 0); }
		public ProducerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_producer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe09Listener typedListener = listener as IDescribe09Listener;
			if (typedListener != null) typedListener.EnterProducer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe09Listener typedListener = listener as IDescribe09Listener;
			if (typedListener != null) typedListener.ExitProducer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe09Visitor<TResult> typedVisitor = visitor as IDescribe09Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProducer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProducerContext producer() {
		ProducerContext _localctx = new ProducerContext(Context, State);
		EnterRule(_localctx, 0, RULE_producer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			Match(HYPHEN);
			State = 17;
			Match(RIGHT_ARROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Text_chunkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_ESCAPE() { return GetToken(Describe09Parser.ESCAPE_ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_HYPHEN() { return GetToken(Describe09Parser.ESCAPE_HYPHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_RIGHT_ARROW() { return GetToken(Describe09Parser.ESCAPE_RIGHT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_LEFT_ARROW() { return GetToken(Describe09Parser.ESCAPE_LEFT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_RIGHT_SQUARE() { return GetToken(Describe09Parser.ESCAPE_RIGHT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_LEFT_SQUARE() { return GetToken(Describe09Parser.ESCAPE_LEFT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_RIGHT_CURL() { return GetToken(Describe09Parser.ESCAPE_RIGHT_CURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_LEFT_CURL() { return GetToken(Describe09Parser.ESCAPE_LEFT_CURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_SEPARATOR() { return GetToken(Describe09Parser.ESCAPE_SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_TERMINATOR() { return GetToken(Describe09Parser.ESCAPE_TERMINATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_LCOMMENT() { return GetToken(Describe09Parser.ESCAPE_LCOMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_BCOMMENT() { return GetToken(Describe09Parser.ESCAPE_BCOMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(Describe09Parser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYPHEN() { return GetToken(Describe09Parser.HYPHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ARROW() { return GetToken(Describe09Parser.RIGHT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SQUARE() { return GetToken(Describe09Parser.RIGHT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURL() { return GetToken(Describe09Parser.RIGHT_CURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD_SLASHES() { return GetToken(Describe09Parser.FORWARD_SLASHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD_SLASH() { return GetToken(Describe09Parser.FORWARD_SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Describe09Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(Describe09Parser.DATA, 0); }
		public Text_chunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text_chunk; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe09Listener typedListener = listener as IDescribe09Listener;
			if (typedListener != null) typedListener.EnterText_chunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe09Listener typedListener = listener as IDescribe09Listener;
			if (typedListener != null) typedListener.ExitText_chunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe09Visitor<TResult> typedVisitor = visitor as IDescribe09Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText_chunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Text_chunkContext text_chunk() {
		Text_chunkContext _localctx = new Text_chunkContext(Context, State);
		EnterRule(_localctx, 2, RULE_text_chunk);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1073735360L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Text_chunkContext[] text_chunk() {
			return GetRuleContexts<Text_chunkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Text_chunkContext text_chunk(int i) {
			return GetRuleContext<Text_chunkContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG() { return GetToken(Describe09Parser.TAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINK() { return GetTokens(Describe09Parser.LINK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINK(int i) {
			return GetToken(Describe09Parser.LINK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECORATOR() { return GetTokens(Describe09Parser.DECORATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECORATOR(int i) {
			return GetToken(Describe09Parser.DECORATOR, i);
		}
		public ItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe09Listener typedListener = listener as IDescribe09Listener;
			if (typedListener != null) typedListener.EnterItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe09Listener typedListener = listener as IDescribe09Listener;
			if (typedListener != null) typedListener.ExitItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe09Visitor<TResult> typedVisitor = visitor as IDescribe09Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemContext item() {
		ItemContext _localctx = new ItemContext(Context, State);
		EnterRule(_localctx, 4, RULE_item);
		int _la;
		try {
			int _alt;
			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 22;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 21;
						text_chunk();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 24;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TAG) {
					{
					State = 26;
					Match(TAG);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 30;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 29;
					text_chunk();
					}
					}
					State = 32;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1073735360L) != 0) );
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 34;
					Match(LINK);
					}
					}
					State = 37;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 39;
					text_chunk();
					}
					}
					State = 42;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1073735360L) != 0) );
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 44;
					Match(DECORATOR);
					}
					}
					State = 47;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 49;
					text_chunk();
					}
					}
					State = 52;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1073735360L) != 0) );
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 54;
					Match(LINK);
					}
					}
					State = 57;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				State = 59;
				Match(TAG);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 61;
					text_chunk();
					}
					}
					State = 64;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1073735360L) != 0) );
				State = 66;
				Match(TAG);
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 67;
					Match(LINK);
					}
					}
					State = 70;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 72;
					text_chunk();
					}
					}
					State = 75;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1073735360L) != 0) );
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 77;
					Match(DECORATOR);
					}
					}
					State = 80;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				State = 82;
				Match(TAG);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 84;
					text_chunk();
					}
					}
					State = 87;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1073735360L) != 0) );
				State = 89;
				Match(TAG);
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 90;
					Match(DECORATOR);
					}
					}
					State = 93;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 95;
					text_chunk();
					}
					}
					State = 98;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1073735360L) != 0) );
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 100;
					Match(DECORATOR);
					}
					}
					State = 103;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 105;
					Match(LINK);
					}
					}
					State = 108;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 110;
					text_chunk();
					}
					}
					State = 113;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1073735360L) != 0) );
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 115;
					Match(LINK);
					}
					}
					State = 118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 120;
					Match(DECORATOR);
					}
					}
					State = 123;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 125;
					text_chunk();
					}
					}
					State = 128;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1073735360L) != 0) );
				State = 130;
				Match(TAG);
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 131;
					Match(DECORATOR);
					}
					}
					State = 134;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 136;
					Match(LINK);
					}
					}
					State = 139;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 141;
					text_chunk();
					}
					}
					State = 144;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1073735360L) != 0) );
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 146;
					Match(DECORATOR);
					}
					}
					State = 149;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				State = 151;
				Match(TAG);
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 152;
					Match(LINK);
					}
					}
					State = 155;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 157;
					text_chunk();
					}
					}
					State = 160;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1073735360L) != 0) );
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 162;
					Match(DECORATOR);
					}
					}
					State = 165;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 167;
					Match(LINK);
					}
					}
					State = 170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				State = 172;
				Match(TAG);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 174;
					text_chunk();
					}
					}
					State = 177;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1073735360L) != 0) );
				State = 179;
				Match(TAG);
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 180;
					Match(LINK);
					}
					}
					State = 183;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 185;
					Match(DECORATOR);
					}
					}
					State = 188;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 190;
					text_chunk();
					}
					}
					State = 193;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1073735360L) != 0) );
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 195;
					Match(LINK);
					}
					}
					State = 198;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				State = 200;
				Match(TAG);
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 201;
					Match(DECORATOR);
					}
					}
					State = 204;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 206;
					text_chunk();
					}
					}
					State = 209;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1073735360L) != 0) );
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 211;
					Match(LINK);
					}
					}
					State = 214;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 216;
					Match(DECORATOR);
					}
					}
					State = 219;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				State = 221;
				Match(TAG);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext[] item() {
			return GetRuleContexts<ItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item(int i) {
			return GetRuleContext<ItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProducerContext producer() {
			return GetRuleContext<ProducerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Item_or_expression_listContext item_or_expression_list() {
			return GetRuleContext<Item_or_expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATOR() { return GetToken(Describe09Parser.TERMINATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe09Listener typedListener = listener as IDescribe09Listener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe09Listener typedListener = listener as IDescribe09Listener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe09Visitor<TResult> typedVisitor = visitor as IDescribe09Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_expression);
		try {
			State = 244;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 225;
				item();
				State = 226;
				producer();
				State = 227;
				item_or_expression_list();
				State = 228;
				Match(TERMINATOR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230;
				item();
				State = 231;
				producer();
				State = 232;
				item();
				State = 233;
				Match(TERMINATOR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 235;
				item();
				State = 236;
				producer();
				State = 237;
				expression();
				State = 238;
				Match(TERMINATOR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 240;
				item();
				State = 241;
				producer();
				State = 242;
				Match(TERMINATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Item_or_expression_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item() {
			return GetRuleContext<ItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR() { return GetToken(Describe09Parser.SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Item_or_expression_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item_or_expression_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe09Listener typedListener = listener as IDescribe09Listener;
			if (typedListener != null) typedListener.EnterItem_or_expression_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe09Listener typedListener = listener as IDescribe09Listener;
			if (typedListener != null) typedListener.ExitItem_or_expression_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe09Visitor<TResult> typedVisitor = visitor as IDescribe09Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem_or_expression_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Item_or_expression_partContext item_or_expression_part() {
		Item_or_expression_partContext _localctx = new Item_or_expression_partContext(Context, State);
		EnterRule(_localctx, 8, RULE_item_or_expression_part);
		int _la;
		try {
			State = 253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246;
				item();
				State = 247;
				Match(SEPARATOR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 249;
				expression();
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEPARATOR) {
					{
					State = 250;
					Match(SEPARATOR);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Item_or_expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item() {
			return GetRuleContext<ItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Item_or_expression_partContext[] item_or_expression_part() {
			return GetRuleContexts<Item_or_expression_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Item_or_expression_partContext item_or_expression_part(int i) {
			return GetRuleContext<Item_or_expression_partContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Item_or_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item_or_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe09Listener typedListener = listener as IDescribe09Listener;
			if (typedListener != null) typedListener.EnterItem_or_expression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe09Listener typedListener = listener as IDescribe09Listener;
			if (typedListener != null) typedListener.ExitItem_or_expression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe09Visitor<TResult> typedVisitor = visitor as IDescribe09Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem_or_expression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Item_or_expression_listContext item_or_expression_list() {
		Item_or_expression_listContext _localctx = new Item_or_expression_listContext(Context, State);
		EnterRule(_localctx, 10, RULE_item_or_expression_list);
		try {
			int _alt;
			State = 269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 256;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 255;
						item_or_expression_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 258;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 260;
				item();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 263;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 262;
						item_or_expression_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 265;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 267;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe09Listener typedListener = listener as IDescribe09Listener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe09Listener typedListener = listener as IDescribe09Listener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe09Visitor<TResult> typedVisitor = visitor as IDescribe09Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 12, RULE_expression_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 271;
					expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 274;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 276;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Describe09Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScriptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scripture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe09Listener typedListener = listener as IDescribe09Listener;
			if (typedListener != null) typedListener.EnterScripture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe09Listener typedListener = listener as IDescribe09Listener;
			if (typedListener != null) typedListener.ExitScripture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe09Visitor<TResult> typedVisitor = visitor as IDescribe09Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScripture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptureContext scripture() {
		ScriptureContext _localctx = new ScriptureContext(Context, State);
		EnterRule(_localctx, 14, RULE_scripture);
		try {
			State = 284;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 278;
				expression_list();
				State = 279;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 281;
				expression();
				State = 282;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,29,287,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,1,0,1,0,1,1,1,1,1,2,4,2,23,8,2,11,2,12,2,24,1,2,3,2,28,8,2,1,2,
		4,2,31,8,2,11,2,12,2,32,1,2,4,2,36,8,2,11,2,12,2,37,1,2,4,2,41,8,2,11,
		2,12,2,42,1,2,4,2,46,8,2,11,2,12,2,47,1,2,4,2,51,8,2,11,2,12,2,52,1,2,
		4,2,56,8,2,11,2,12,2,57,1,2,1,2,1,2,4,2,63,8,2,11,2,12,2,64,1,2,1,2,4,
		2,69,8,2,11,2,12,2,70,1,2,4,2,74,8,2,11,2,12,2,75,1,2,4,2,79,8,2,11,2,
		12,2,80,1,2,1,2,1,2,4,2,86,8,2,11,2,12,2,87,1,2,1,2,4,2,92,8,2,11,2,12,
		2,93,1,2,4,2,97,8,2,11,2,12,2,98,1,2,4,2,102,8,2,11,2,12,2,103,1,2,4,2,
		107,8,2,11,2,12,2,108,1,2,4,2,112,8,2,11,2,12,2,113,1,2,4,2,117,8,2,11,
		2,12,2,118,1,2,4,2,122,8,2,11,2,12,2,123,1,2,4,2,127,8,2,11,2,12,2,128,
		1,2,1,2,4,2,133,8,2,11,2,12,2,134,1,2,4,2,138,8,2,11,2,12,2,139,1,2,4,
		2,143,8,2,11,2,12,2,144,1,2,4,2,148,8,2,11,2,12,2,149,1,2,1,2,4,2,154,
		8,2,11,2,12,2,155,1,2,4,2,159,8,2,11,2,12,2,160,1,2,4,2,164,8,2,11,2,12,
		2,165,1,2,4,2,169,8,2,11,2,12,2,170,1,2,1,2,1,2,4,2,176,8,2,11,2,12,2,
		177,1,2,1,2,4,2,182,8,2,11,2,12,2,183,1,2,4,2,187,8,2,11,2,12,2,188,1,
		2,4,2,192,8,2,11,2,12,2,193,1,2,4,2,197,8,2,11,2,12,2,198,1,2,1,2,4,2,
		203,8,2,11,2,12,2,204,1,2,4,2,208,8,2,11,2,12,2,209,1,2,4,2,213,8,2,11,
		2,12,2,214,1,2,4,2,218,8,2,11,2,12,2,219,1,2,1,2,3,2,224,8,2,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,
		245,8,3,1,4,1,4,1,4,1,4,1,4,3,4,252,8,4,3,4,254,8,4,1,5,4,5,257,8,5,11,
		5,12,5,258,1,5,1,5,1,5,4,5,264,8,5,11,5,12,5,265,1,5,1,5,3,5,270,8,5,1,
		6,4,6,273,8,6,11,6,12,6,274,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,285,8,
		7,1,7,0,0,8,0,2,4,6,8,10,12,14,0,1,3,0,6,7,9,10,13,29,340,0,16,1,0,0,0,
		2,19,1,0,0,0,4,223,1,0,0,0,6,244,1,0,0,0,8,253,1,0,0,0,10,269,1,0,0,0,
		12,272,1,0,0,0,14,284,1,0,0,0,16,17,5,6,0,0,17,18,5,7,0,0,18,1,1,0,0,0,
		19,20,7,0,0,0,20,3,1,0,0,0,21,23,3,2,1,0,22,21,1,0,0,0,23,24,1,0,0,0,24,
		22,1,0,0,0,24,25,1,0,0,0,25,27,1,0,0,0,26,28,5,3,0,0,27,26,1,0,0,0,27,
		28,1,0,0,0,28,224,1,0,0,0,29,31,3,2,1,0,30,29,1,0,0,0,31,32,1,0,0,0,32,
		30,1,0,0,0,32,33,1,0,0,0,33,35,1,0,0,0,34,36,5,4,0,0,35,34,1,0,0,0,36,
		37,1,0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,224,1,0,0,0,39,41,3,2,1,0,40,
		39,1,0,0,0,41,42,1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,0,43,45,1,0,0,0,44,
		46,5,5,0,0,45,44,1,0,0,0,46,47,1,0,0,0,47,45,1,0,0,0,47,48,1,0,0,0,48,
		224,1,0,0,0,49,51,3,2,1,0,50,49,1,0,0,0,51,52,1,0,0,0,52,50,1,0,0,0,52,
		53,1,0,0,0,53,55,1,0,0,0,54,56,5,4,0,0,55,54,1,0,0,0,56,57,1,0,0,0,57,
		55,1,0,0,0,57,58,1,0,0,0,58,59,1,0,0,0,59,60,5,3,0,0,60,224,1,0,0,0,61,
		63,3,2,1,0,62,61,1,0,0,0,63,64,1,0,0,0,64,62,1,0,0,0,64,65,1,0,0,0,65,
		66,1,0,0,0,66,68,5,3,0,0,67,69,5,4,0,0,68,67,1,0,0,0,69,70,1,0,0,0,70,
		68,1,0,0,0,70,71,1,0,0,0,71,224,1,0,0,0,72,74,3,2,1,0,73,72,1,0,0,0,74,
		75,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,78,1,0,0,0,77,79,5,5,0,0,78,
		77,1,0,0,0,79,80,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,82,1,0,0,0,82,
		83,5,3,0,0,83,224,1,0,0,0,84,86,3,2,1,0,85,84,1,0,0,0,86,87,1,0,0,0,87,
		85,1,0,0,0,87,88,1,0,0,0,88,89,1,0,0,0,89,91,5,3,0,0,90,92,5,5,0,0,91,
		90,1,0,0,0,92,93,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,224,1,0,0,0,95,
		97,3,2,1,0,96,95,1,0,0,0,97,98,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,
		101,1,0,0,0,100,102,5,5,0,0,101,100,1,0,0,0,102,103,1,0,0,0,103,101,1,
		0,0,0,103,104,1,0,0,0,104,106,1,0,0,0,105,107,5,4,0,0,106,105,1,0,0,0,
		107,108,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,224,1,0,0,0,110,112,
		3,2,1,0,111,110,1,0,0,0,112,113,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,
		0,114,116,1,0,0,0,115,117,5,4,0,0,116,115,1,0,0,0,117,118,1,0,0,0,118,
		116,1,0,0,0,118,119,1,0,0,0,119,121,1,0,0,0,120,122,5,5,0,0,121,120,1,
		0,0,0,122,123,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,224,1,0,0,0,
		125,127,3,2,1,0,126,125,1,0,0,0,127,128,1,0,0,0,128,126,1,0,0,0,128,129,
		1,0,0,0,129,130,1,0,0,0,130,132,5,3,0,0,131,133,5,5,0,0,132,131,1,0,0,
		0,133,134,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,137,1,0,0,0,136,
		138,5,4,0,0,137,136,1,0,0,0,138,139,1,0,0,0,139,137,1,0,0,0,139,140,1,
		0,0,0,140,224,1,0,0,0,141,143,3,2,1,0,142,141,1,0,0,0,143,144,1,0,0,0,
		144,142,1,0,0,0,144,145,1,0,0,0,145,147,1,0,0,0,146,148,5,5,0,0,147,146,
		1,0,0,0,148,149,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,151,1,0,0,
		0,151,153,5,3,0,0,152,154,5,4,0,0,153,152,1,0,0,0,154,155,1,0,0,0,155,
		153,1,0,0,0,155,156,1,0,0,0,156,224,1,0,0,0,157,159,3,2,1,0,158,157,1,
		0,0,0,159,160,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,163,1,0,0,0,
		162,164,5,5,0,0,163,162,1,0,0,0,164,165,1,0,0,0,165,163,1,0,0,0,165,166,
		1,0,0,0,166,168,1,0,0,0,167,169,5,4,0,0,168,167,1,0,0,0,169,170,1,0,0,
		0,170,168,1,0,0,0,170,171,1,0,0,0,171,172,1,0,0,0,172,173,5,3,0,0,173,
		224,1,0,0,0,174,176,3,2,1,0,175,174,1,0,0,0,176,177,1,0,0,0,177,175,1,
		0,0,0,177,178,1,0,0,0,178,179,1,0,0,0,179,181,5,3,0,0,180,182,5,4,0,0,
		181,180,1,0,0,0,182,183,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,186,
		1,0,0,0,185,187,5,5,0,0,186,185,1,0,0,0,187,188,1,0,0,0,188,186,1,0,0,
		0,188,189,1,0,0,0,189,224,1,0,0,0,190,192,3,2,1,0,191,190,1,0,0,0,192,
		193,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,196,1,0,0,0,195,197,5,
		4,0,0,196,195,1,0,0,0,197,198,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,
		199,200,1,0,0,0,200,202,5,3,0,0,201,203,5,5,0,0,202,201,1,0,0,0,203,204,
		1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,224,1,0,0,0,206,208,3,2,1,
		0,207,206,1,0,0,0,208,209,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,
		212,1,0,0,0,211,213,5,4,0,0,212,211,1,0,0,0,213,214,1,0,0,0,214,212,1,
		0,0,0,214,215,1,0,0,0,215,217,1,0,0,0,216,218,5,5,0,0,217,216,1,0,0,0,
		218,219,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,221,1,0,0,0,221,222,
		5,3,0,0,222,224,1,0,0,0,223,22,1,0,0,0,223,30,1,0,0,0,223,40,1,0,0,0,223,
		50,1,0,0,0,223,62,1,0,0,0,223,73,1,0,0,0,223,85,1,0,0,0,223,96,1,0,0,0,
		223,111,1,0,0,0,223,126,1,0,0,0,223,142,1,0,0,0,223,158,1,0,0,0,223,175,
		1,0,0,0,223,191,1,0,0,0,223,207,1,0,0,0,224,5,1,0,0,0,225,226,3,4,2,0,
		226,227,3,0,0,0,227,228,3,10,5,0,228,229,5,12,0,0,229,245,1,0,0,0,230,
		231,3,4,2,0,231,232,3,0,0,0,232,233,3,4,2,0,233,234,5,12,0,0,234,245,1,
		0,0,0,235,236,3,4,2,0,236,237,3,0,0,0,237,238,3,6,3,0,238,239,5,12,0,0,
		239,245,1,0,0,0,240,241,3,4,2,0,241,242,3,0,0,0,242,243,5,12,0,0,243,245,
		1,0,0,0,244,225,1,0,0,0,244,230,1,0,0,0,244,235,1,0,0,0,244,240,1,0,0,
		0,245,7,1,0,0,0,246,247,3,4,2,0,247,248,5,11,0,0,248,254,1,0,0,0,249,251,
		3,6,3,0,250,252,5,11,0,0,251,250,1,0,0,0,251,252,1,0,0,0,252,254,1,0,0,
		0,253,246,1,0,0,0,253,249,1,0,0,0,254,9,1,0,0,0,255,257,3,8,4,0,256,255,
		1,0,0,0,257,258,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,260,1,0,0,
		0,260,261,3,4,2,0,261,270,1,0,0,0,262,264,3,8,4,0,263,262,1,0,0,0,264,
		265,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,268,3,
		6,3,0,268,270,1,0,0,0,269,256,1,0,0,0,269,263,1,0,0,0,270,11,1,0,0,0,271,
		273,3,6,3,0,272,271,1,0,0,0,273,274,1,0,0,0,274,272,1,0,0,0,274,275,1,
		0,0,0,275,276,1,0,0,0,276,277,3,6,3,0,277,13,1,0,0,0,278,279,3,12,6,0,
		279,280,5,0,0,1,280,285,1,0,0,0,281,282,3,6,3,0,282,283,5,0,0,1,283,285,
		1,0,0,0,284,278,1,0,0,0,284,281,1,0,0,0,285,15,1,0,0,0,47,24,27,32,37,
		42,47,52,57,64,70,75,80,87,93,98,103,108,113,118,123,128,134,139,144,149,
		155,160,165,170,177,183,188,193,198,204,209,214,219,223,244,251,253,258,
		265,269,274,284
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
