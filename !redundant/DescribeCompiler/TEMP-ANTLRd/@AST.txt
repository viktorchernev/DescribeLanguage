//https://joshvarty.com/learn-roslyn-now/
//https://www.youtube.com/watch?v=jypKhFJVHF8&list=PLxk7xaZWBdUT23QfaQTCJDG6Q1xx6uHdG&index=2

A. The `DescribeScriptureNode` serves as a root for the AST Tree and represents a single source code file. 



	DescribeScriptureNode

		.Filename					->string
		.FirstExpression			->DescribeExpression 			//->Expressions[0]
		.Expressions				->List<DescribeExpression>
		.Tail						->string
		.Exception					->Exception
		
		.HasException				->bool
		.HasMultipleExpressions		->bool
		.HasTail					->bool
		
		.Ctor(ParserRuleContext)
		.ToString()					->string
		.ToCode()					->string
		.ToTokenList()				->List<DescribeToken>



B. The `DescribeExpressionNode` represents a production, also called expression in the Describe grammar

	DescribeExpressionNode

		.Title						->DescribeItem
		.Body						->List<AstNode>
		.Exception					->Exception
		.Position					->DescribeSourcePosition
		
		.HasException				->bool
		.IsEmpty					->bool
		.IsSimple					->bool
		
		.Ctor(ParserRuleContext)
		.ToString()					->string
		.ToCode()					->string
		.ToTokenList()				->List<DescribeToken>



C. The `DescribeItemNode` represents a single item in Describe language

	DescribeItemNode

		.DataText					->string
		
		.Data						->List<AstNode>
		.Links						->List<AstNode>
		.Decorators					->List<AstNode>
		.Inversions					->List<AstNode>
		
		.Position					->DescribeSourcePosition
		.Exception					->Exception

		.Ctor(ParserRuleContext)
		.ToString()					->string
		.ToCode()					->string
		.ToTokenList()				->List<DescribeToken>



D. The `DescribeToken` represents a token aka non-terminal in the Describe grammar, also can be called 
a leaf node in the Abstract Syntax Tree. 

`Text` is the actual string of characters that were red by the lexer as this token. 
`Type` is the type of the token, as defined in the ANTLR4 grammar for the Describe language and the `DesctibeTokenType` enum.
`Position` is the place that this token resides within the source code.
`ToString()` produces a text representation of the token on a single line, that is convenient for debugging.
`ToCode()` produces the actual source code, and in the case of the `DescribeToken`, it will be the same as `Text`.

	DescribeToken

		.Text						->string
		.Type						->DesctibeTokenType
		.Position					->DescribeSourcePosition
		
		.Ctor(ITerminalNode)
		.ToString()					->string
		.ToCode()					->string

	
	DescribeSourcePosition
	
		.StartLine					->int
		.StartChar					->int
		.LastLine					->int
		.LastChar					->int


	DesctibeTokenType
	
		LineComment,
        BlockComment,
        NewLine,
        Hyphen,
        RightArrow,
        Separator,
        Terminator,
        ForewardSlash,
        EscapeEscape,
        EscapeHyphen,
        EscapeRightArrow,
        EscapeSeparator,
        EscapeTerminator,
        EscapeLineComment,
        EscapeBlockComment,
        Data,

        EndOfFile,
        Unknown