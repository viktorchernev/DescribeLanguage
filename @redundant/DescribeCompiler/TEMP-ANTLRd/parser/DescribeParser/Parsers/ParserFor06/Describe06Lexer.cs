//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Describe06.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Describe06Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINE_COMMENT=1, BLOCK_COMMENT=2, HYPHEN=3, RIGHT_ARROW=4, SEPARATOR=5, 
		TERMINATOR=6, FORWARD_SLASHES=7, FORWARD_SLASH=8, STAR=9, ESCAPE_ESCAPE=10, 
		ESCAPE_HYPHEN=11, ESCAPE_RIGHT_ARROW=12, ESCAPE_SEPARATOR=13, ESCAPE_TERMINATOR=14, 
		ESCAPE_LCOMMENT=15, ESCAPE_BCOMMENT=16, ESCAPE=17, DATA=18;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"WHITESPACE", "LINESPACE", "LINE_COMMENT", "BLOCK_COMMENT", "HYPHEN", 
		"RIGHT_ARROW", "SEPARATOR", "TERMINATOR", "FORWARD_SLASHES", "FORWARD_SLASH", 
		"STAR", "ESCAPE_ESCAPE", "ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", "ESCAPE_SEPARATOR", 
		"ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", "ESCAPE", "DATA_CHAR", 
		"DATA"
	};


	public Describe06Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Describe06Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINE_COMMENT", "BLOCK_COMMENT", "HYPHEN", "RIGHT_ARROW", "SEPARATOR", 
		"TERMINATOR", "FORWARD_SLASHES", "FORWARD_SLASH", "STAR", "ESCAPE_ESCAPE", 
		"ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", "ESCAPE_SEPARATOR", "ESCAPE_TERMINATOR", 
		"ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", "ESCAPE", "DATA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Describe06.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Describe06Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,18,220,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,1,
		0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,5,2,53,8,2,10,2,12,2,56,9,2,1,2,3,2,59,8,
		2,1,2,1,2,5,2,63,8,2,10,2,12,2,66,9,2,1,2,3,2,69,8,2,1,2,1,2,1,3,1,3,1,
		3,1,3,5,3,77,8,3,10,3,12,3,80,9,3,1,3,1,3,1,3,1,3,5,3,86,8,3,10,3,12,3,
		89,9,3,1,3,3,3,92,8,3,1,3,1,3,1,4,1,4,1,5,1,5,5,5,100,8,5,10,5,12,5,103,
		9,5,1,6,1,6,5,6,107,8,6,10,6,12,6,110,9,6,1,7,1,7,5,7,114,8,7,10,7,12,
		7,117,9,7,1,8,1,8,1,8,1,8,5,8,123,8,8,10,8,12,8,126,9,8,1,9,1,9,5,9,130,
		8,9,10,9,12,9,133,9,9,1,10,1,10,5,10,137,8,10,10,10,12,10,140,9,10,1,11,
		1,11,1,11,1,11,5,11,146,8,11,10,11,12,11,149,9,11,1,12,1,12,1,12,1,12,
		5,12,155,8,12,10,12,12,12,158,9,12,1,13,1,13,1,13,1,13,5,13,164,8,13,10,
		13,12,13,167,9,13,1,14,1,14,1,14,1,14,5,14,173,8,14,10,14,12,14,176,9,
		14,1,15,1,15,1,15,1,15,5,15,182,8,15,10,15,12,15,185,9,15,1,16,1,16,1,
		16,1,16,1,16,5,16,192,8,16,10,16,12,16,195,9,16,1,17,1,17,1,17,1,17,1,
		17,5,17,202,8,17,10,17,12,17,205,9,17,1,18,1,18,5,18,209,8,18,10,18,12,
		18,212,9,18,1,19,1,19,1,20,4,20,217,8,20,11,20,12,20,218,2,54,78,0,21,
		1,0,3,0,5,1,7,2,9,3,11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,29,
		13,31,14,33,15,35,16,37,17,39,0,41,18,1,0,3,11,0,9,9,11,13,32,32,133,133,
		160,160,5760,5760,8192,8202,8232,8233,8239,8239,8287,8287,12288,12288,
		10,0,9,13,32,32,133,133,160,160,5760,5760,8192,8202,8232,8233,8239,8239,
		8287,8287,12288,12288,6,0,42,42,44,45,47,47,59,59,62,62,92,92,238,0,5,
		1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
		0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
		1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
		0,0,41,1,0,0,0,1,43,1,0,0,0,3,45,1,0,0,0,5,47,1,0,0,0,7,72,1,0,0,0,9,95,
		1,0,0,0,11,97,1,0,0,0,13,104,1,0,0,0,15,111,1,0,0,0,17,118,1,0,0,0,19,
		127,1,0,0,0,21,134,1,0,0,0,23,141,1,0,0,0,25,150,1,0,0,0,27,159,1,0,0,
		0,29,168,1,0,0,0,31,177,1,0,0,0,33,186,1,0,0,0,35,196,1,0,0,0,37,206,1,
		0,0,0,39,213,1,0,0,0,41,216,1,0,0,0,43,44,7,0,0,0,44,2,1,0,0,0,45,46,7,
		1,0,0,46,4,1,0,0,0,47,48,5,47,0,0,48,49,5,47,0,0,49,50,5,32,0,0,50,54,
		1,0,0,0,51,53,9,0,0,0,52,51,1,0,0,0,53,56,1,0,0,0,54,55,1,0,0,0,54,52,
		1,0,0,0,55,68,1,0,0,0,56,54,1,0,0,0,57,59,5,13,0,0,58,57,1,0,0,0,58,59,
		1,0,0,0,59,60,1,0,0,0,60,64,5,10,0,0,61,63,3,3,1,0,62,61,1,0,0,0,63,66,
		1,0,0,0,64,62,1,0,0,0,64,65,1,0,0,0,65,69,1,0,0,0,66,64,1,0,0,0,67,69,
		5,0,0,1,68,58,1,0,0,0,68,67,1,0,0,0,69,70,1,0,0,0,70,71,6,2,0,0,71,6,1,
		0,0,0,72,73,5,47,0,0,73,74,5,42,0,0,74,78,1,0,0,0,75,77,9,0,0,0,76,75,
		1,0,0,0,77,80,1,0,0,0,78,79,1,0,0,0,78,76,1,0,0,0,79,91,1,0,0,0,80,78,
		1,0,0,0,81,82,5,42,0,0,82,83,5,47,0,0,83,87,1,0,0,0,84,86,3,3,1,0,85,84,
		1,0,0,0,86,89,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,92,1,0,0,0,89,87,
		1,0,0,0,90,92,5,0,0,1,91,81,1,0,0,0,91,90,1,0,0,0,92,93,1,0,0,0,93,94,
		6,3,0,0,94,8,1,0,0,0,95,96,5,45,0,0,96,10,1,0,0,0,97,101,5,62,0,0,98,100,
		3,3,1,0,99,98,1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,
		12,1,0,0,0,103,101,1,0,0,0,104,108,5,44,0,0,105,107,3,3,1,0,106,105,1,
		0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,14,1,0,0,0,110,
		108,1,0,0,0,111,115,5,59,0,0,112,114,3,3,1,0,113,112,1,0,0,0,114,117,1,
		0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,16,1,0,0,0,117,115,1,0,0,0,118,
		119,5,47,0,0,119,120,5,47,0,0,120,124,1,0,0,0,121,123,3,3,1,0,122,121,
		1,0,0,0,123,126,1,0,0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,18,1,0,0,0,
		126,124,1,0,0,0,127,131,5,47,0,0,128,130,3,3,1,0,129,128,1,0,0,0,130,133,
		1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,20,1,0,0,0,133,131,1,0,0,0,
		134,138,5,42,0,0,135,137,3,3,1,0,136,135,1,0,0,0,137,140,1,0,0,0,138,136,
		1,0,0,0,138,139,1,0,0,0,139,22,1,0,0,0,140,138,1,0,0,0,141,142,5,92,0,
		0,142,143,5,92,0,0,143,147,1,0,0,0,144,146,3,3,1,0,145,144,1,0,0,0,146,
		149,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,24,1,0,0,0,149,147,1,0,
		0,0,150,151,5,92,0,0,151,152,5,45,0,0,152,156,1,0,0,0,153,155,3,3,1,0,
		154,153,1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,26,
		1,0,0,0,158,156,1,0,0,0,159,160,5,92,0,0,160,161,5,62,0,0,161,165,1,0,
		0,0,162,164,3,3,1,0,163,162,1,0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,165,
		166,1,0,0,0,166,28,1,0,0,0,167,165,1,0,0,0,168,169,5,92,0,0,169,170,5,
		44,0,0,170,174,1,0,0,0,171,173,3,3,1,0,172,171,1,0,0,0,173,176,1,0,0,0,
		174,172,1,0,0,0,174,175,1,0,0,0,175,30,1,0,0,0,176,174,1,0,0,0,177,178,
		5,92,0,0,178,179,5,59,0,0,179,183,1,0,0,0,180,182,3,3,1,0,181,180,1,0,
		0,0,182,185,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,32,1,0,0,0,185,
		183,1,0,0,0,186,187,5,92,0,0,187,188,5,47,0,0,188,189,5,47,0,0,189,193,
		1,0,0,0,190,192,3,3,1,0,191,190,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,
		0,193,194,1,0,0,0,194,34,1,0,0,0,195,193,1,0,0,0,196,197,5,92,0,0,197,
		198,5,47,0,0,198,199,5,42,0,0,199,203,1,0,0,0,200,202,3,3,1,0,201,200,
		1,0,0,0,202,205,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,36,1,0,0,0,
		205,203,1,0,0,0,206,210,5,92,0,0,207,209,3,3,1,0,208,207,1,0,0,0,209,212,
		1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,38,1,0,0,0,212,210,1,0,0,0,
		213,214,8,2,0,0,214,40,1,0,0,0,215,217,3,39,19,0,216,215,1,0,0,0,217,218,
		1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,42,1,0,0,0,23,0,54,58,64,68,
		78,87,91,101,108,115,124,131,138,147,156,165,174,183,193,203,210,218,1,
		6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
