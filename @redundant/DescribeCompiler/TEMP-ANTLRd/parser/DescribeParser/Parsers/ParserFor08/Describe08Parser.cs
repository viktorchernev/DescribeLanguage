//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Describe08.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Describe08Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINE_COMMENT=1, BLOCK_COMMENT=2, TAG=3, LINK=4, HYPHEN=5, RIGHT_ARROW=6, 
		LEFT_ARROW=7, RIGHT_SQUARE=8, SEPARATOR=9, TERMINATOR=10, FORWARD_SLASHES=11, 
		FORWARD_SLASH=12, STAR=13, ESCAPE_ESCAPE=14, ESCAPE_HYPHEN=15, ESCAPE_RIGHT_ARROW=16, 
		ESCAPE_LEFT_ARROW=17, ESCAPE_RIGHT_SQUARE=18, ESCAPE_LEFT_SQUARE=19, ESCAPE_SEPARATOR=20, 
		ESCAPE_TERMINATOR=21, ESCAPE_LCOMMENT=22, ESCAPE_BCOMMENT=23, ESCAPE=24, 
		DATA=25;
	public const int
		RULE_producer = 0, RULE_text_chunk = 1, RULE_item = 2, RULE_expression = 3, 
		RULE_item_or_expression_part = 4, RULE_item_or_expression_list = 5, RULE_expression_list = 6, 
		RULE_scripture = 7;
	public static readonly string[] ruleNames = {
		"producer", "text_chunk", "item", "expression", "item_or_expression_part", 
		"item_or_expression_list", "expression_list", "scripture"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINE_COMMENT", "BLOCK_COMMENT", "TAG", "LINK", "HYPHEN", "RIGHT_ARROW", 
		"LEFT_ARROW", "RIGHT_SQUARE", "SEPARATOR", "TERMINATOR", "FORWARD_SLASHES", 
		"FORWARD_SLASH", "STAR", "ESCAPE_ESCAPE", "ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", 
		"ESCAPE_LEFT_ARROW", "ESCAPE_RIGHT_SQUARE", "ESCAPE_LEFT_SQUARE", "ESCAPE_SEPARATOR", 
		"ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", "ESCAPE", "DATA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Describe08.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Describe08Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Describe08Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Describe08Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProducerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYPHEN() { return GetToken(Describe08Parser.HYPHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ARROW() { return GetToken(Describe08Parser.RIGHT_ARROW, 0); }
		public ProducerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_producer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.EnterProducer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.ExitProducer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe08Visitor<TResult> typedVisitor = visitor as IDescribe08Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProducer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProducerContext producer() {
		ProducerContext _localctx = new ProducerContext(Context, State);
		EnterRule(_localctx, 0, RULE_producer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			Match(HYPHEN);
			State = 17;
			Match(RIGHT_ARROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Text_chunkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_ESCAPE() { return GetToken(Describe08Parser.ESCAPE_ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_HYPHEN() { return GetToken(Describe08Parser.ESCAPE_HYPHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_RIGHT_ARROW() { return GetToken(Describe08Parser.ESCAPE_RIGHT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_LEFT_ARROW() { return GetToken(Describe08Parser.ESCAPE_LEFT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_RIGHT_SQUARE() { return GetToken(Describe08Parser.ESCAPE_RIGHT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_LEFT_SQUARE() { return GetToken(Describe08Parser.ESCAPE_LEFT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_SEPARATOR() { return GetToken(Describe08Parser.ESCAPE_SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_TERMINATOR() { return GetToken(Describe08Parser.ESCAPE_TERMINATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_LCOMMENT() { return GetToken(Describe08Parser.ESCAPE_LCOMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_BCOMMENT() { return GetToken(Describe08Parser.ESCAPE_BCOMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(Describe08Parser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYPHEN() { return GetToken(Describe08Parser.HYPHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ARROW() { return GetToken(Describe08Parser.RIGHT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SQUARE() { return GetToken(Describe08Parser.RIGHT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD_SLASHES() { return GetToken(Describe08Parser.FORWARD_SLASHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD_SLASH() { return GetToken(Describe08Parser.FORWARD_SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Describe08Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(Describe08Parser.DATA, 0); }
		public Text_chunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text_chunk; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.EnterText_chunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.ExitText_chunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe08Visitor<TResult> typedVisitor = visitor as IDescribe08Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText_chunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Text_chunkContext text_chunk() {
		Text_chunkContext _localctx = new Text_chunkContext(Context, State);
		EnterRule(_localctx, 2, RULE_text_chunk);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 67107168L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Text_chunkContext[] text_chunk() {
			return GetRuleContexts<Text_chunkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Text_chunkContext text_chunk(int i) {
			return GetRuleContext<Text_chunkContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG() { return GetToken(Describe08Parser.TAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINK() { return GetTokens(Describe08Parser.LINK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINK(int i) {
			return GetToken(Describe08Parser.LINK, i);
		}
		public ItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.EnterItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.ExitItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe08Visitor<TResult> typedVisitor = visitor as IDescribe08Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemContext item() {
		ItemContext _localctx = new ItemContext(Context, State);
		EnterRule(_localctx, 4, RULE_item);
		int _la;
		try {
			int _alt;
			State = 62;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 22;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 21;
						text_chunk();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 24;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TAG) {
					{
					State = 26;
					Match(TAG);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 30;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 29;
					text_chunk();
					}
					}
					State = 32;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 67107168L) != 0) );
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 34;
					Match(LINK);
					}
					}
					State = 37;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 39;
					text_chunk();
					}
					}
					State = 42;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 67107168L) != 0) );
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 44;
					Match(LINK);
					}
					}
					State = 47;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				State = 49;
				Match(TAG);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 51;
					text_chunk();
					}
					}
					State = 54;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 67107168L) != 0) );
				State = 56;
				Match(TAG);
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 57;
					Match(LINK);
					}
					}
					State = 60;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext[] item() {
			return GetRuleContexts<ItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item(int i) {
			return GetRuleContext<ItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProducerContext producer() {
			return GetRuleContext<ProducerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Item_or_expression_listContext item_or_expression_list() {
			return GetRuleContext<Item_or_expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATOR() { return GetToken(Describe08Parser.TERMINATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe08Visitor<TResult> typedVisitor = visitor as IDescribe08Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_expression);
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64;
				item();
				State = 65;
				producer();
				State = 66;
				item_or_expression_list();
				State = 67;
				Match(TERMINATOR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69;
				item();
				State = 70;
				producer();
				State = 71;
				item();
				State = 72;
				Match(TERMINATOR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 74;
				item();
				State = 75;
				producer();
				State = 76;
				expression();
				State = 77;
				Match(TERMINATOR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 79;
				item();
				State = 80;
				producer();
				State = 81;
				Match(TERMINATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Item_or_expression_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item() {
			return GetRuleContext<ItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR() { return GetToken(Describe08Parser.SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Item_or_expression_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item_or_expression_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.EnterItem_or_expression_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.ExitItem_or_expression_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe08Visitor<TResult> typedVisitor = visitor as IDescribe08Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem_or_expression_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Item_or_expression_partContext item_or_expression_part() {
		Item_or_expression_partContext _localctx = new Item_or_expression_partContext(Context, State);
		EnterRule(_localctx, 8, RULE_item_or_expression_part);
		int _la;
		try {
			State = 92;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 85;
				item();
				State = 86;
				Match(SEPARATOR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				expression();
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEPARATOR) {
					{
					State = 89;
					Match(SEPARATOR);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Item_or_expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item() {
			return GetRuleContext<ItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Item_or_expression_partContext[] item_or_expression_part() {
			return GetRuleContexts<Item_or_expression_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Item_or_expression_partContext item_or_expression_part(int i) {
			return GetRuleContext<Item_or_expression_partContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Item_or_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item_or_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.EnterItem_or_expression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.ExitItem_or_expression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe08Visitor<TResult> typedVisitor = visitor as IDescribe08Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem_or_expression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Item_or_expression_listContext item_or_expression_list() {
		Item_or_expression_listContext _localctx = new Item_or_expression_listContext(Context, State);
		EnterRule(_localctx, 10, RULE_item_or_expression_list);
		try {
			int _alt;
			State = 108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 94;
						item_or_expression_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 97;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 99;
				item();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 102;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 101;
						item_or_expression_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 104;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 106;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe08Visitor<TResult> typedVisitor = visitor as IDescribe08Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 12, RULE_expression_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 110;
					expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 113;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 115;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Describe08Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScriptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scripture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.EnterScripture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.ExitScripture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe08Visitor<TResult> typedVisitor = visitor as IDescribe08Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScripture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptureContext scripture() {
		ScriptureContext _localctx = new ScriptureContext(Context, State);
		EnterRule(_localctx, 14, RULE_scripture);
		try {
			State = 123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117;
				expression_list();
				State = 118;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 120;
				expression();
				State = 121;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,25,126,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,1,0,1,0,1,1,1,1,1,2,4,2,23,8,2,11,2,12,2,24,1,2,3,2,28,8,2,1,2,
		4,2,31,8,2,11,2,12,2,32,1,2,4,2,36,8,2,11,2,12,2,37,1,2,4,2,41,8,2,11,
		2,12,2,42,1,2,4,2,46,8,2,11,2,12,2,47,1,2,1,2,1,2,4,2,53,8,2,11,2,12,2,
		54,1,2,1,2,4,2,59,8,2,11,2,12,2,60,3,2,63,8,2,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,84,8,3,1,4,1,4,
		1,4,1,4,1,4,3,4,91,8,4,3,4,93,8,4,1,5,4,5,96,8,5,11,5,12,5,97,1,5,1,5,
		1,5,4,5,103,8,5,11,5,12,5,104,1,5,1,5,3,5,109,8,5,1,6,4,6,112,8,6,11,6,
		12,6,113,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,124,8,7,1,7,0,0,8,0,2,4,6,
		8,10,12,14,0,1,3,0,5,6,8,8,11,25,138,0,16,1,0,0,0,2,19,1,0,0,0,4,62,1,
		0,0,0,6,83,1,0,0,0,8,92,1,0,0,0,10,108,1,0,0,0,12,111,1,0,0,0,14,123,1,
		0,0,0,16,17,5,5,0,0,17,18,5,6,0,0,18,1,1,0,0,0,19,20,7,0,0,0,20,3,1,0,
		0,0,21,23,3,2,1,0,22,21,1,0,0,0,23,24,1,0,0,0,24,22,1,0,0,0,24,25,1,0,
		0,0,25,27,1,0,0,0,26,28,5,3,0,0,27,26,1,0,0,0,27,28,1,0,0,0,28,63,1,0,
		0,0,29,31,3,2,1,0,30,29,1,0,0,0,31,32,1,0,0,0,32,30,1,0,0,0,32,33,1,0,
		0,0,33,35,1,0,0,0,34,36,5,4,0,0,35,34,1,0,0,0,36,37,1,0,0,0,37,35,1,0,
		0,0,37,38,1,0,0,0,38,63,1,0,0,0,39,41,3,2,1,0,40,39,1,0,0,0,41,42,1,0,
		0,0,42,40,1,0,0,0,42,43,1,0,0,0,43,45,1,0,0,0,44,46,5,4,0,0,45,44,1,0,
		0,0,46,47,1,0,0,0,47,45,1,0,0,0,47,48,1,0,0,0,48,49,1,0,0,0,49,50,5,3,
		0,0,50,63,1,0,0,0,51,53,3,2,1,0,52,51,1,0,0,0,53,54,1,0,0,0,54,52,1,0,
		0,0,54,55,1,0,0,0,55,56,1,0,0,0,56,58,5,3,0,0,57,59,5,4,0,0,58,57,1,0,
		0,0,59,60,1,0,0,0,60,58,1,0,0,0,60,61,1,0,0,0,61,63,1,0,0,0,62,22,1,0,
		0,0,62,30,1,0,0,0,62,40,1,0,0,0,62,52,1,0,0,0,63,5,1,0,0,0,64,65,3,4,2,
		0,65,66,3,0,0,0,66,67,3,10,5,0,67,68,5,10,0,0,68,84,1,0,0,0,69,70,3,4,
		2,0,70,71,3,0,0,0,71,72,3,4,2,0,72,73,5,10,0,0,73,84,1,0,0,0,74,75,3,4,
		2,0,75,76,3,0,0,0,76,77,3,6,3,0,77,78,5,10,0,0,78,84,1,0,0,0,79,80,3,4,
		2,0,80,81,3,0,0,0,81,82,5,10,0,0,82,84,1,0,0,0,83,64,1,0,0,0,83,69,1,0,
		0,0,83,74,1,0,0,0,83,79,1,0,0,0,84,7,1,0,0,0,85,86,3,4,2,0,86,87,5,9,0,
		0,87,93,1,0,0,0,88,90,3,6,3,0,89,91,5,9,0,0,90,89,1,0,0,0,90,91,1,0,0,
		0,91,93,1,0,0,0,92,85,1,0,0,0,92,88,1,0,0,0,93,9,1,0,0,0,94,96,3,8,4,0,
		95,94,1,0,0,0,96,97,1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,99,1,0,0,0,
		99,100,3,4,2,0,100,109,1,0,0,0,101,103,3,8,4,0,102,101,1,0,0,0,103,104,
		1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,106,1,0,0,0,106,107,3,6,3,
		0,107,109,1,0,0,0,108,95,1,0,0,0,108,102,1,0,0,0,109,11,1,0,0,0,110,112,
		3,6,3,0,111,110,1,0,0,0,112,113,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,
		0,114,115,1,0,0,0,115,116,3,6,3,0,116,13,1,0,0,0,117,118,3,12,6,0,118,
		119,5,0,0,1,119,124,1,0,0,0,120,121,3,6,3,0,121,122,5,0,0,1,122,124,1,
		0,0,0,123,117,1,0,0,0,123,120,1,0,0,0,124,15,1,0,0,0,17,24,27,32,37,42,
		47,54,60,62,83,90,92,97,104,108,113,123
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
