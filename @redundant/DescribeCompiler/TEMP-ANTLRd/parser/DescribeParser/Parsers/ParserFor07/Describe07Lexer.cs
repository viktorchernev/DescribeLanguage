//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Describe07.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Describe07Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINE_COMMENT=1, BLOCK_COMMENT=2, TAG=3, HYPHEN=4, RIGHT_ARROW=5, LEFT_ARROW=6, 
		SEPARATOR=7, TERMINATOR=8, FORWARD_SLASHES=9, FORWARD_SLASH=10, STAR=11, 
		ESCAPE_ESCAPE=12, ESCAPE_HYPHEN=13, ESCAPE_RIGHT_ARROW=14, ESCAPE_LEFT_ARROW=15, 
		ESCAPE_SEPARATOR=16, ESCAPE_TERMINATOR=17, ESCAPE_LCOMMENT=18, ESCAPE_BCOMMENT=19, 
		ESCAPE=20, DATA=21;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"WHITESPACE", "LINESPACE", "LINE_COMMENT", "BLOCK_COMMENT", "TAG", "HYPHEN", 
		"RIGHT_ARROW", "LEFT_ARROW", "SEPARATOR", "TERMINATOR", "FORWARD_SLASHES", 
		"FORWARD_SLASH", "STAR", "ESCAPE_ESCAPE", "ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", 
		"ESCAPE_LEFT_ARROW", "ESCAPE_SEPARATOR", "ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", 
		"ESCAPE_BCOMMENT", "ESCAPE", "DATA_CHAR", "DATA"
	};


	public Describe07Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Describe07Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINE_COMMENT", "BLOCK_COMMENT", "TAG", "HYPHEN", "RIGHT_ARROW", 
		"LEFT_ARROW", "SEPARATOR", "TERMINATOR", "FORWARD_SLASHES", "FORWARD_SLASH", 
		"STAR", "ESCAPE_ESCAPE", "ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", "ESCAPE_LEFT_ARROW", 
		"ESCAPE_SEPARATOR", "ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", 
		"ESCAPE", "DATA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Describe07.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Describe07Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,21,255,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,5,2,59,8,
		2,10,2,12,2,62,9,2,1,2,3,2,65,8,2,1,2,1,2,5,2,69,8,2,10,2,12,2,72,9,2,
		1,2,3,2,75,8,2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,83,8,3,10,3,12,3,86,9,3,1,3,
		1,3,1,3,1,3,5,3,92,8,3,10,3,12,3,95,9,3,1,3,3,3,98,8,3,1,3,1,3,1,4,1,4,
		4,4,104,8,4,11,4,12,4,105,1,4,1,4,5,4,110,8,4,10,4,12,4,113,9,4,1,5,1,
		5,1,6,1,6,5,6,119,8,6,10,6,12,6,122,9,6,1,7,1,7,5,7,126,8,7,10,7,12,7,
		129,9,7,1,8,1,8,5,8,133,8,8,10,8,12,8,136,9,8,1,9,1,9,5,9,140,8,9,10,9,
		12,9,143,9,9,1,10,1,10,1,10,1,10,5,10,149,8,10,10,10,12,10,152,9,10,1,
		11,1,11,5,11,156,8,11,10,11,12,11,159,9,11,1,12,1,12,5,12,163,8,12,10,
		12,12,12,166,9,12,1,13,1,13,1,13,1,13,5,13,172,8,13,10,13,12,13,175,9,
		13,1,14,1,14,1,14,1,14,5,14,181,8,14,10,14,12,14,184,9,14,1,15,1,15,1,
		15,1,15,5,15,190,8,15,10,15,12,15,193,9,15,1,16,1,16,1,16,1,16,5,16,199,
		8,16,10,16,12,16,202,9,16,1,17,1,17,1,17,1,17,5,17,208,8,17,10,17,12,17,
		211,9,17,1,18,1,18,1,18,1,18,5,18,217,8,18,10,18,12,18,220,9,18,1,19,1,
		19,1,19,1,19,1,19,5,19,227,8,19,10,19,12,19,230,9,19,1,20,1,20,1,20,1,
		20,1,20,5,20,237,8,20,10,20,12,20,240,9,20,1,21,1,21,5,21,244,8,21,10,
		21,12,21,247,9,21,1,22,1,22,1,23,4,23,252,8,23,11,23,12,23,253,3,60,84,
		105,0,24,1,0,3,0,5,1,7,2,9,3,11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,11,
		27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,0,47,21,1,0,3,
		11,0,9,9,11,13,32,32,133,133,160,160,5760,5760,8192,8202,8232,8233,8239,
		8239,8287,8287,12288,12288,10,0,9,13,32,32,133,133,160,160,5760,5760,8192,
		8202,8232,8233,8239,8239,8287,8287,12288,12288,6,0,42,42,44,45,47,47,59,
		60,62,62,92,92,277,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
		13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
		0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
		0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,47,
		1,0,0,0,1,49,1,0,0,0,3,51,1,0,0,0,5,53,1,0,0,0,7,78,1,0,0,0,9,101,1,0,
		0,0,11,114,1,0,0,0,13,116,1,0,0,0,15,123,1,0,0,0,17,130,1,0,0,0,19,137,
		1,0,0,0,21,144,1,0,0,0,23,153,1,0,0,0,25,160,1,0,0,0,27,167,1,0,0,0,29,
		176,1,0,0,0,31,185,1,0,0,0,33,194,1,0,0,0,35,203,1,0,0,0,37,212,1,0,0,
		0,39,221,1,0,0,0,41,231,1,0,0,0,43,241,1,0,0,0,45,248,1,0,0,0,47,251,1,
		0,0,0,49,50,7,0,0,0,50,2,1,0,0,0,51,52,7,1,0,0,52,4,1,0,0,0,53,54,5,47,
		0,0,54,55,5,47,0,0,55,56,5,32,0,0,56,60,1,0,0,0,57,59,9,0,0,0,58,57,1,
		0,0,0,59,62,1,0,0,0,60,61,1,0,0,0,60,58,1,0,0,0,61,74,1,0,0,0,62,60,1,
		0,0,0,63,65,5,13,0,0,64,63,1,0,0,0,64,65,1,0,0,0,65,66,1,0,0,0,66,70,5,
		10,0,0,67,69,3,3,1,0,68,67,1,0,0,0,69,72,1,0,0,0,70,68,1,0,0,0,70,71,1,
		0,0,0,71,75,1,0,0,0,72,70,1,0,0,0,73,75,5,0,0,1,74,64,1,0,0,0,74,73,1,
		0,0,0,75,76,1,0,0,0,76,77,6,2,0,0,77,6,1,0,0,0,78,79,5,47,0,0,79,80,5,
		42,0,0,80,84,1,0,0,0,81,83,9,0,0,0,82,81,1,0,0,0,83,86,1,0,0,0,84,85,1,
		0,0,0,84,82,1,0,0,0,85,97,1,0,0,0,86,84,1,0,0,0,87,88,5,42,0,0,88,89,5,
		47,0,0,89,93,1,0,0,0,90,92,3,3,1,0,91,90,1,0,0,0,92,95,1,0,0,0,93,91,1,
		0,0,0,93,94,1,0,0,0,94,98,1,0,0,0,95,93,1,0,0,0,96,98,5,0,0,1,97,87,1,
		0,0,0,97,96,1,0,0,0,98,99,1,0,0,0,99,100,6,3,0,0,100,8,1,0,0,0,101,103,
		5,60,0,0,102,104,9,0,0,0,103,102,1,0,0,0,104,105,1,0,0,0,105,106,1,0,0,
		0,105,103,1,0,0,0,106,107,1,0,0,0,107,111,5,62,0,0,108,110,3,3,1,0,109,
		108,1,0,0,0,110,113,1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,10,1,0,
		0,0,113,111,1,0,0,0,114,115,5,45,0,0,115,12,1,0,0,0,116,120,5,62,0,0,117,
		119,3,3,1,0,118,117,1,0,0,0,119,122,1,0,0,0,120,118,1,0,0,0,120,121,1,
		0,0,0,121,14,1,0,0,0,122,120,1,0,0,0,123,127,5,60,0,0,124,126,3,3,1,0,
		125,124,1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,16,
		1,0,0,0,129,127,1,0,0,0,130,134,5,44,0,0,131,133,3,3,1,0,132,131,1,0,0,
		0,133,136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,18,1,0,0,0,136,134,
		1,0,0,0,137,141,5,59,0,0,138,140,3,3,1,0,139,138,1,0,0,0,140,143,1,0,0,
		0,141,139,1,0,0,0,141,142,1,0,0,0,142,20,1,0,0,0,143,141,1,0,0,0,144,145,
		5,47,0,0,145,146,5,47,0,0,146,150,1,0,0,0,147,149,3,3,1,0,148,147,1,0,
		0,0,149,152,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,22,1,0,0,0,152,
		150,1,0,0,0,153,157,5,47,0,0,154,156,3,3,1,0,155,154,1,0,0,0,156,159,1,
		0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,24,1,0,0,0,159,157,1,0,0,0,160,
		164,5,42,0,0,161,163,3,3,1,0,162,161,1,0,0,0,163,166,1,0,0,0,164,162,1,
		0,0,0,164,165,1,0,0,0,165,26,1,0,0,0,166,164,1,0,0,0,167,168,5,92,0,0,
		168,169,5,92,0,0,169,173,1,0,0,0,170,172,3,3,1,0,171,170,1,0,0,0,172,175,
		1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,28,1,0,0,0,175,173,1,0,0,0,
		176,177,5,92,0,0,177,178,5,45,0,0,178,182,1,0,0,0,179,181,3,3,1,0,180,
		179,1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,30,1,0,
		0,0,184,182,1,0,0,0,185,186,5,92,0,0,186,187,5,62,0,0,187,191,1,0,0,0,
		188,190,3,3,1,0,189,188,1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,191,192,
		1,0,0,0,192,32,1,0,0,0,193,191,1,0,0,0,194,195,5,92,0,0,195,196,5,60,0,
		0,196,200,1,0,0,0,197,199,3,3,1,0,198,197,1,0,0,0,199,202,1,0,0,0,200,
		198,1,0,0,0,200,201,1,0,0,0,201,34,1,0,0,0,202,200,1,0,0,0,203,204,5,92,
		0,0,204,205,5,44,0,0,205,209,1,0,0,0,206,208,3,3,1,0,207,206,1,0,0,0,208,
		211,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,36,1,0,0,0,211,209,1,0,
		0,0,212,213,5,92,0,0,213,214,5,59,0,0,214,218,1,0,0,0,215,217,3,3,1,0,
		216,215,1,0,0,0,217,220,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,38,
		1,0,0,0,220,218,1,0,0,0,221,222,5,92,0,0,222,223,5,47,0,0,223,224,5,47,
		0,0,224,228,1,0,0,0,225,227,3,3,1,0,226,225,1,0,0,0,227,230,1,0,0,0,228,
		226,1,0,0,0,228,229,1,0,0,0,229,40,1,0,0,0,230,228,1,0,0,0,231,232,5,92,
		0,0,232,233,5,47,0,0,233,234,5,42,0,0,234,238,1,0,0,0,235,237,3,3,1,0,
		236,235,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,42,
		1,0,0,0,240,238,1,0,0,0,241,245,5,92,0,0,242,244,3,3,1,0,243,242,1,0,0,
		0,244,247,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,44,1,0,0,0,247,245,
		1,0,0,0,248,249,8,2,0,0,249,46,1,0,0,0,250,252,3,45,22,0,251,250,1,0,0,
		0,252,253,1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,48,1,0,0,0,27,0,
		60,64,70,74,84,93,97,105,111,120,127,134,141,150,157,164,173,182,191,200,
		209,218,228,238,245,253,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
