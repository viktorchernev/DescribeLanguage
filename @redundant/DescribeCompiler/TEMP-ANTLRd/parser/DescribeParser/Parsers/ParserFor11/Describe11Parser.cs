//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Describe11.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Describe11Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINE_COMMENT=1, BLOCK_COMMENT=2, TAG=3, LINK=4, DECORATOR=5, HYPHEN=6, 
		TILDE=7, PRODUCTION_ARROW=8, SEPARATOR=9, TERMINATOR=10, FORWARD_SLASHES=11, 
		FORWARD_SLASH=12, COMMA=13, SEMICOLON=14, RIGHT_ARROW=15, LEFT_ARROW=16, 
		RIGHT_SQUARE=17, LEFT_SQUARE=18, RIGHT_CURL=19, LEFT_CURL=20, STAR=21, 
		ESCAPE_ESCAPE=22, ESCAPE_HYPHEN=23, ESCAPE_RIGHT_ARROW=24, ESCAPE_LEFT_ARROW=25, 
		ESCAPE_RIGHT_SQUARE=26, ESCAPE_LEFT_SQUARE=27, ESCAPE_RIGHT_CURL=28, ESCAPE_LEFT_CURL=29, 
		ESCAPE_SEPARATOR=30, ESCAPE_TERMINATOR=31, ESCAPE_LCOMMENT=32, ESCAPE_BCOMMENT=33, 
		ESCAPE=34, DATA=35;
	public const int
		RULE_producer = 0, RULE_text_chunk = 1, RULE_item = 2, RULE_expression = 3, 
		RULE_item_or_expression_part = 4, RULE_item_or_expression_list = 5, RULE_expression_list = 6, 
		RULE_scripture = 7;
	public static readonly string[] ruleNames = {
		"producer", "text_chunk", "item", "expression", "item_or_expression_part", 
		"item_or_expression_list", "expression_list", "scripture"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'-'", "'~'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINE_COMMENT", "BLOCK_COMMENT", "TAG", "LINK", "DECORATOR", "HYPHEN", 
		"TILDE", "PRODUCTION_ARROW", "SEPARATOR", "TERMINATOR", "FORWARD_SLASHES", 
		"FORWARD_SLASH", "COMMA", "SEMICOLON", "RIGHT_ARROW", "LEFT_ARROW", "RIGHT_SQUARE", 
		"LEFT_SQUARE", "RIGHT_CURL", "LEFT_CURL", "STAR", "ESCAPE_ESCAPE", "ESCAPE_HYPHEN", 
		"ESCAPE_RIGHT_ARROW", "ESCAPE_LEFT_ARROW", "ESCAPE_RIGHT_SQUARE", "ESCAPE_LEFT_SQUARE", 
		"ESCAPE_RIGHT_CURL", "ESCAPE_LEFT_CURL", "ESCAPE_SEPARATOR", "ESCAPE_TERMINATOR", 
		"ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", "ESCAPE", "DATA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Describe11.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Describe11Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Describe11Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Describe11Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProducerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYPHEN() { return GetToken(Describe11Parser.HYPHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRODUCTION_ARROW() { return GetToken(Describe11Parser.PRODUCTION_ARROW, 0); }
		public ProducerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_producer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe11Listener typedListener = listener as IDescribe11Listener;
			if (typedListener != null) typedListener.EnterProducer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe11Listener typedListener = listener as IDescribe11Listener;
			if (typedListener != null) typedListener.ExitProducer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe11Visitor<TResult> typedVisitor = visitor as IDescribe11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProducer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProducerContext producer() {
		ProducerContext _localctx = new ProducerContext(Context, State);
		EnterRule(_localctx, 0, RULE_producer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			Match(HYPHEN);
			State = 17;
			Match(PRODUCTION_ARROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Text_chunkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_ESCAPE() { return GetToken(Describe11Parser.ESCAPE_ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_HYPHEN() { return GetToken(Describe11Parser.ESCAPE_HYPHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_RIGHT_ARROW() { return GetToken(Describe11Parser.ESCAPE_RIGHT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_LEFT_ARROW() { return GetToken(Describe11Parser.ESCAPE_LEFT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_RIGHT_SQUARE() { return GetToken(Describe11Parser.ESCAPE_RIGHT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_LEFT_SQUARE() { return GetToken(Describe11Parser.ESCAPE_LEFT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_RIGHT_CURL() { return GetToken(Describe11Parser.ESCAPE_RIGHT_CURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_LEFT_CURL() { return GetToken(Describe11Parser.ESCAPE_LEFT_CURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_SEPARATOR() { return GetToken(Describe11Parser.ESCAPE_SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_TERMINATOR() { return GetToken(Describe11Parser.ESCAPE_TERMINATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_LCOMMENT() { return GetToken(Describe11Parser.ESCAPE_LCOMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_BCOMMENT() { return GetToken(Describe11Parser.ESCAPE_BCOMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(Describe11Parser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYPHEN() { return GetToken(Describe11Parser.HYPHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Describe11Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(Describe11Parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ARROW() { return GetToken(Describe11Parser.RIGHT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ARROW() { return GetToken(Describe11Parser.LEFT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRODUCTION_ARROW() { return GetToken(Describe11Parser.PRODUCTION_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SQUARE() { return GetToken(Describe11Parser.RIGHT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SQUARE() { return GetToken(Describe11Parser.LEFT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURL() { return GetToken(Describe11Parser.RIGHT_CURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURL() { return GetToken(Describe11Parser.LEFT_CURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD_SLASHES() { return GetToken(Describe11Parser.FORWARD_SLASHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD_SLASH() { return GetToken(Describe11Parser.FORWARD_SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Describe11Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(Describe11Parser.DATA, 0); }
		public Text_chunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text_chunk; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe11Listener typedListener = listener as IDescribe11Listener;
			if (typedListener != null) typedListener.EnterText_chunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe11Listener typedListener = listener as IDescribe11Listener;
			if (typedListener != null) typedListener.ExitText_chunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe11Visitor<TResult> typedVisitor = visitor as IDescribe11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText_chunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Text_chunkContext text_chunk() {
		Text_chunkContext _localctx = new Text_chunkContext(Context, State);
		EnterRule(_localctx, 2, RULE_text_chunk);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 68719475008L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(Describe11Parser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Text_chunkContext[] text_chunk() {
			return GetRuleContexts<Text_chunkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Text_chunkContext text_chunk(int i) {
			return GetRuleContext<Text_chunkContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG() { return GetToken(Describe11Parser.TAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINK() { return GetTokens(Describe11Parser.LINK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINK(int i) {
			return GetToken(Describe11Parser.LINK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECORATOR() { return GetTokens(Describe11Parser.DECORATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECORATOR(int i) {
			return GetToken(Describe11Parser.DECORATOR, i);
		}
		public ItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe11Listener typedListener = listener as IDescribe11Listener;
			if (typedListener != null) typedListener.EnterItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe11Listener typedListener = listener as IDescribe11Listener;
			if (typedListener != null) typedListener.ExitItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe11Visitor<TResult> typedVisitor = visitor as IDescribe11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemContext item() {
		ItemContext _localctx = new ItemContext(Context, State);
		EnterRule(_localctx, 4, RULE_item);
		int _la;
		try {
			int _alt;
			State = 268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 22;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TILDE) {
					{
					State = 21;
					Match(TILDE);
					}
				}

				State = 25;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 24;
						text_chunk();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 27;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 30;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TAG) {
					{
					State = 29;
					Match(TAG);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TILDE) {
					{
					State = 32;
					Match(TILDE);
					}
				}

				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 35;
					text_chunk();
					}
					}
					State = 38;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 68719475008L) != 0) );
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 40;
					Match(LINK);
					}
					}
					State = 43;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TILDE) {
					{
					State = 45;
					Match(TILDE);
					}
				}

				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 48;
					text_chunk();
					}
					}
					State = 51;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 68719475008L) != 0) );
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 53;
					Match(DECORATOR);
					}
					}
					State = 56;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TILDE) {
					{
					State = 58;
					Match(TILDE);
					}
				}

				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 61;
					text_chunk();
					}
					}
					State = 64;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 68719475008L) != 0) );
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 66;
					Match(LINK);
					}
					}
					State = 69;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				State = 71;
				Match(TAG);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TILDE) {
					{
					State = 73;
					Match(TILDE);
					}
				}

				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 76;
					text_chunk();
					}
					}
					State = 79;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 68719475008L) != 0) );
				State = 81;
				Match(TAG);
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 82;
					Match(LINK);
					}
					}
					State = 85;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TILDE) {
					{
					State = 87;
					Match(TILDE);
					}
				}

				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 90;
					text_chunk();
					}
					}
					State = 93;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 68719475008L) != 0) );
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 95;
					Match(DECORATOR);
					}
					}
					State = 98;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				State = 100;
				Match(TAG);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TILDE) {
					{
					State = 102;
					Match(TILDE);
					}
				}

				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 105;
					text_chunk();
					}
					}
					State = 108;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 68719475008L) != 0) );
				State = 110;
				Match(TAG);
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 111;
					Match(DECORATOR);
					}
					}
					State = 114;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TILDE) {
					{
					State = 116;
					Match(TILDE);
					}
				}

				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 119;
					text_chunk();
					}
					}
					State = 122;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 68719475008L) != 0) );
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 124;
					Match(DECORATOR);
					}
					}
					State = 127;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 129;
					Match(LINK);
					}
					}
					State = 132;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TILDE) {
					{
					State = 134;
					Match(TILDE);
					}
				}

				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 137;
					text_chunk();
					}
					}
					State = 140;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 68719475008L) != 0) );
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 142;
					Match(LINK);
					}
					}
					State = 145;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 147;
					Match(DECORATOR);
					}
					}
					State = 150;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TILDE) {
					{
					State = 152;
					Match(TILDE);
					}
				}

				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 155;
					text_chunk();
					}
					}
					State = 158;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 68719475008L) != 0) );
				State = 160;
				Match(TAG);
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 161;
					Match(DECORATOR);
					}
					}
					State = 164;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 166;
					Match(LINK);
					}
					}
					State = 169;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TILDE) {
					{
					State = 171;
					Match(TILDE);
					}
				}

				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 174;
					text_chunk();
					}
					}
					State = 177;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 68719475008L) != 0) );
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 179;
					Match(DECORATOR);
					}
					}
					State = 182;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				State = 184;
				Match(TAG);
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 185;
					Match(LINK);
					}
					}
					State = 188;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TILDE) {
					{
					State = 190;
					Match(TILDE);
					}
				}

				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 193;
					text_chunk();
					}
					}
					State = 196;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 68719475008L) != 0) );
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 198;
					Match(DECORATOR);
					}
					}
					State = 201;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 203;
					Match(LINK);
					}
					}
					State = 206;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				State = 208;
				Match(TAG);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TILDE) {
					{
					State = 210;
					Match(TILDE);
					}
				}

				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 213;
					text_chunk();
					}
					}
					State = 216;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 68719475008L) != 0) );
				State = 218;
				Match(TAG);
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 219;
					Match(LINK);
					}
					}
					State = 222;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 224;
					Match(DECORATOR);
					}
					}
					State = 227;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TILDE) {
					{
					State = 229;
					Match(TILDE);
					}
				}

				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 232;
					text_chunk();
					}
					}
					State = 235;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 68719475008L) != 0) );
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 237;
					Match(LINK);
					}
					}
					State = 240;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				State = 242;
				Match(TAG);
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 243;
					Match(DECORATOR);
					}
					}
					State = 246;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TILDE) {
					{
					State = 248;
					Match(TILDE);
					}
				}

				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 251;
					text_chunk();
					}
					}
					State = 254;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 68719475008L) != 0) );
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 256;
					Match(LINK);
					}
					}
					State = 259;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 261;
					Match(DECORATOR);
					}
					}
					State = 264;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				State = 266;
				Match(TAG);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext[] item() {
			return GetRuleContexts<ItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item(int i) {
			return GetRuleContext<ItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProducerContext producer() {
			return GetRuleContext<ProducerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Item_or_expression_listContext item_or_expression_list() {
			return GetRuleContext<Item_or_expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATOR() { return GetToken(Describe11Parser.TERMINATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe11Listener typedListener = listener as IDescribe11Listener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe11Listener typedListener = listener as IDescribe11Listener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe11Visitor<TResult> typedVisitor = visitor as IDescribe11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_expression);
		try {
			State = 289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 270;
				item();
				State = 271;
				producer();
				State = 272;
				item_or_expression_list();
				State = 273;
				Match(TERMINATOR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 275;
				item();
				State = 276;
				producer();
				State = 277;
				item();
				State = 278;
				Match(TERMINATOR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 280;
				item();
				State = 281;
				producer();
				State = 282;
				expression();
				State = 283;
				Match(TERMINATOR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 285;
				item();
				State = 286;
				producer();
				State = 287;
				Match(TERMINATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Item_or_expression_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item() {
			return GetRuleContext<ItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR() { return GetToken(Describe11Parser.SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Item_or_expression_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item_or_expression_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe11Listener typedListener = listener as IDescribe11Listener;
			if (typedListener != null) typedListener.EnterItem_or_expression_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe11Listener typedListener = listener as IDescribe11Listener;
			if (typedListener != null) typedListener.ExitItem_or_expression_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe11Visitor<TResult> typedVisitor = visitor as IDescribe11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem_or_expression_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Item_or_expression_partContext item_or_expression_part() {
		Item_or_expression_partContext _localctx = new Item_or_expression_partContext(Context, State);
		EnterRule(_localctx, 8, RULE_item_or_expression_part);
		int _la;
		try {
			State = 298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 291;
				item();
				State = 292;
				Match(SEPARATOR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 294;
				expression();
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEPARATOR) {
					{
					State = 295;
					Match(SEPARATOR);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Item_or_expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item() {
			return GetRuleContext<ItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Item_or_expression_partContext[] item_or_expression_part() {
			return GetRuleContexts<Item_or_expression_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Item_or_expression_partContext item_or_expression_part(int i) {
			return GetRuleContext<Item_or_expression_partContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Item_or_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item_or_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe11Listener typedListener = listener as IDescribe11Listener;
			if (typedListener != null) typedListener.EnterItem_or_expression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe11Listener typedListener = listener as IDescribe11Listener;
			if (typedListener != null) typedListener.ExitItem_or_expression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe11Visitor<TResult> typedVisitor = visitor as IDescribe11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem_or_expression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Item_or_expression_listContext item_or_expression_list() {
		Item_or_expression_listContext _localctx = new Item_or_expression_listContext(Context, State);
		EnterRule(_localctx, 10, RULE_item_or_expression_list);
		try {
			int _alt;
			State = 314;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 301;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 300;
						item_or_expression_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 303;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 305;
				item();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 308;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 307;
						item_or_expression_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 310;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 312;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe11Listener typedListener = listener as IDescribe11Listener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe11Listener typedListener = listener as IDescribe11Listener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe11Visitor<TResult> typedVisitor = visitor as IDescribe11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 12, RULE_expression_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 316;
					expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 319;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 321;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Describe11Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScriptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scripture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe11Listener typedListener = listener as IDescribe11Listener;
			if (typedListener != null) typedListener.EnterScripture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe11Listener typedListener = listener as IDescribe11Listener;
			if (typedListener != null) typedListener.ExitScripture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe11Visitor<TResult> typedVisitor = visitor as IDescribe11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScripture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptureContext scripture() {
		ScriptureContext _localctx = new ScriptureContext(Context, State);
		EnterRule(_localctx, 14, RULE_scripture);
		try {
			State = 329;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 323;
				expression_list();
				State = 324;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 326;
				expression();
				State = 327;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,35,332,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,1,0,1,0,1,1,1,1,1,2,3,2,23,8,2,1,2,4,2,26,8,2,11,2,12,2,27,1,2,
		3,2,31,8,2,1,2,3,2,34,8,2,1,2,4,2,37,8,2,11,2,12,2,38,1,2,4,2,42,8,2,11,
		2,12,2,43,1,2,3,2,47,8,2,1,2,4,2,50,8,2,11,2,12,2,51,1,2,4,2,55,8,2,11,
		2,12,2,56,1,2,3,2,60,8,2,1,2,4,2,63,8,2,11,2,12,2,64,1,2,4,2,68,8,2,11,
		2,12,2,69,1,2,1,2,1,2,3,2,75,8,2,1,2,4,2,78,8,2,11,2,12,2,79,1,2,1,2,4,
		2,84,8,2,11,2,12,2,85,1,2,3,2,89,8,2,1,2,4,2,92,8,2,11,2,12,2,93,1,2,4,
		2,97,8,2,11,2,12,2,98,1,2,1,2,1,2,3,2,104,8,2,1,2,4,2,107,8,2,11,2,12,
		2,108,1,2,1,2,4,2,113,8,2,11,2,12,2,114,1,2,3,2,118,8,2,1,2,4,2,121,8,
		2,11,2,12,2,122,1,2,4,2,126,8,2,11,2,12,2,127,1,2,4,2,131,8,2,11,2,12,
		2,132,1,2,3,2,136,8,2,1,2,4,2,139,8,2,11,2,12,2,140,1,2,4,2,144,8,2,11,
		2,12,2,145,1,2,4,2,149,8,2,11,2,12,2,150,1,2,3,2,154,8,2,1,2,4,2,157,8,
		2,11,2,12,2,158,1,2,1,2,4,2,163,8,2,11,2,12,2,164,1,2,4,2,168,8,2,11,2,
		12,2,169,1,2,3,2,173,8,2,1,2,4,2,176,8,2,11,2,12,2,177,1,2,4,2,181,8,2,
		11,2,12,2,182,1,2,1,2,4,2,187,8,2,11,2,12,2,188,1,2,3,2,192,8,2,1,2,4,
		2,195,8,2,11,2,12,2,196,1,2,4,2,200,8,2,11,2,12,2,201,1,2,4,2,205,8,2,
		11,2,12,2,206,1,2,1,2,1,2,3,2,212,8,2,1,2,4,2,215,8,2,11,2,12,2,216,1,
		2,1,2,4,2,221,8,2,11,2,12,2,222,1,2,4,2,226,8,2,11,2,12,2,227,1,2,3,2,
		231,8,2,1,2,4,2,234,8,2,11,2,12,2,235,1,2,4,2,239,8,2,11,2,12,2,240,1,
		2,1,2,4,2,245,8,2,11,2,12,2,246,1,2,3,2,250,8,2,1,2,4,2,253,8,2,11,2,12,
		2,254,1,2,4,2,258,8,2,11,2,12,2,259,1,2,4,2,263,8,2,11,2,12,2,264,1,2,
		1,2,3,2,269,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,3,3,290,8,3,1,4,1,4,1,4,1,4,1,4,3,4,297,8,4,3,4,
		299,8,4,1,5,4,5,302,8,5,11,5,12,5,303,1,5,1,5,1,5,4,5,309,8,5,11,5,12,
		5,310,1,5,1,5,3,5,315,8,5,1,6,4,6,318,8,6,11,6,12,6,319,1,6,1,6,1,7,1,
		7,1,7,1,7,1,7,1,7,3,7,330,8,7,1,7,0,0,8,0,2,4,6,8,10,12,14,0,1,3,0,6,6,
		8,8,11,35,400,0,16,1,0,0,0,2,19,1,0,0,0,4,268,1,0,0,0,6,289,1,0,0,0,8,
		298,1,0,0,0,10,314,1,0,0,0,12,317,1,0,0,0,14,329,1,0,0,0,16,17,5,6,0,0,
		17,18,5,8,0,0,18,1,1,0,0,0,19,20,7,0,0,0,20,3,1,0,0,0,21,23,5,7,0,0,22,
		21,1,0,0,0,22,23,1,0,0,0,23,25,1,0,0,0,24,26,3,2,1,0,25,24,1,0,0,0,26,
		27,1,0,0,0,27,25,1,0,0,0,27,28,1,0,0,0,28,30,1,0,0,0,29,31,5,3,0,0,30,
		29,1,0,0,0,30,31,1,0,0,0,31,269,1,0,0,0,32,34,5,7,0,0,33,32,1,0,0,0,33,
		34,1,0,0,0,34,36,1,0,0,0,35,37,3,2,1,0,36,35,1,0,0,0,37,38,1,0,0,0,38,
		36,1,0,0,0,38,39,1,0,0,0,39,41,1,0,0,0,40,42,5,4,0,0,41,40,1,0,0,0,42,
		43,1,0,0,0,43,41,1,0,0,0,43,44,1,0,0,0,44,269,1,0,0,0,45,47,5,7,0,0,46,
		45,1,0,0,0,46,47,1,0,0,0,47,49,1,0,0,0,48,50,3,2,1,0,49,48,1,0,0,0,50,
		51,1,0,0,0,51,49,1,0,0,0,51,52,1,0,0,0,52,54,1,0,0,0,53,55,5,5,0,0,54,
		53,1,0,0,0,55,56,1,0,0,0,56,54,1,0,0,0,56,57,1,0,0,0,57,269,1,0,0,0,58,
		60,5,7,0,0,59,58,1,0,0,0,59,60,1,0,0,0,60,62,1,0,0,0,61,63,3,2,1,0,62,
		61,1,0,0,0,63,64,1,0,0,0,64,62,1,0,0,0,64,65,1,0,0,0,65,67,1,0,0,0,66,
		68,5,4,0,0,67,66,1,0,0,0,68,69,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,
		71,1,0,0,0,71,72,5,3,0,0,72,269,1,0,0,0,73,75,5,7,0,0,74,73,1,0,0,0,74,
		75,1,0,0,0,75,77,1,0,0,0,76,78,3,2,1,0,77,76,1,0,0,0,78,79,1,0,0,0,79,
		77,1,0,0,0,79,80,1,0,0,0,80,81,1,0,0,0,81,83,5,3,0,0,82,84,5,4,0,0,83,
		82,1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,269,1,0,0,0,87,
		89,5,7,0,0,88,87,1,0,0,0,88,89,1,0,0,0,89,91,1,0,0,0,90,92,3,2,1,0,91,
		90,1,0,0,0,92,93,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,96,1,0,0,0,95,
		97,5,5,0,0,96,95,1,0,0,0,97,98,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,
		100,1,0,0,0,100,101,5,3,0,0,101,269,1,0,0,0,102,104,5,7,0,0,103,102,1,
		0,0,0,103,104,1,0,0,0,104,106,1,0,0,0,105,107,3,2,1,0,106,105,1,0,0,0,
		107,108,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,110,1,0,0,0,110,112,
		5,3,0,0,111,113,5,5,0,0,112,111,1,0,0,0,113,114,1,0,0,0,114,112,1,0,0,
		0,114,115,1,0,0,0,115,269,1,0,0,0,116,118,5,7,0,0,117,116,1,0,0,0,117,
		118,1,0,0,0,118,120,1,0,0,0,119,121,3,2,1,0,120,119,1,0,0,0,121,122,1,
		0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,125,1,0,0,0,124,126,5,5,0,0,
		125,124,1,0,0,0,126,127,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,130,
		1,0,0,0,129,131,5,4,0,0,130,129,1,0,0,0,131,132,1,0,0,0,132,130,1,0,0,
		0,132,133,1,0,0,0,133,269,1,0,0,0,134,136,5,7,0,0,135,134,1,0,0,0,135,
		136,1,0,0,0,136,138,1,0,0,0,137,139,3,2,1,0,138,137,1,0,0,0,139,140,1,
		0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,143,1,0,0,0,142,144,5,4,0,0,
		143,142,1,0,0,0,144,145,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,148,
		1,0,0,0,147,149,5,5,0,0,148,147,1,0,0,0,149,150,1,0,0,0,150,148,1,0,0,
		0,150,151,1,0,0,0,151,269,1,0,0,0,152,154,5,7,0,0,153,152,1,0,0,0,153,
		154,1,0,0,0,154,156,1,0,0,0,155,157,3,2,1,0,156,155,1,0,0,0,157,158,1,
		0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,160,1,0,0,0,160,162,5,3,0,0,
		161,163,5,5,0,0,162,161,1,0,0,0,163,164,1,0,0,0,164,162,1,0,0,0,164,165,
		1,0,0,0,165,167,1,0,0,0,166,168,5,4,0,0,167,166,1,0,0,0,168,169,1,0,0,
		0,169,167,1,0,0,0,169,170,1,0,0,0,170,269,1,0,0,0,171,173,5,7,0,0,172,
		171,1,0,0,0,172,173,1,0,0,0,173,175,1,0,0,0,174,176,3,2,1,0,175,174,1,
		0,0,0,176,177,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,180,1,0,0,0,
		179,181,5,5,0,0,180,179,1,0,0,0,181,182,1,0,0,0,182,180,1,0,0,0,182,183,
		1,0,0,0,183,184,1,0,0,0,184,186,5,3,0,0,185,187,5,4,0,0,186,185,1,0,0,
		0,187,188,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,269,1,0,0,0,190,
		192,5,7,0,0,191,190,1,0,0,0,191,192,1,0,0,0,192,194,1,0,0,0,193,195,3,
		2,1,0,194,193,1,0,0,0,195,196,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,
		197,199,1,0,0,0,198,200,5,5,0,0,199,198,1,0,0,0,200,201,1,0,0,0,201,199,
		1,0,0,0,201,202,1,0,0,0,202,204,1,0,0,0,203,205,5,4,0,0,204,203,1,0,0,
		0,205,206,1,0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,208,1,0,0,0,208,
		209,5,3,0,0,209,269,1,0,0,0,210,212,5,7,0,0,211,210,1,0,0,0,211,212,1,
		0,0,0,212,214,1,0,0,0,213,215,3,2,1,0,214,213,1,0,0,0,215,216,1,0,0,0,
		216,214,1,0,0,0,216,217,1,0,0,0,217,218,1,0,0,0,218,220,5,3,0,0,219,221,
		5,4,0,0,220,219,1,0,0,0,221,222,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,
		0,223,225,1,0,0,0,224,226,5,5,0,0,225,224,1,0,0,0,226,227,1,0,0,0,227,
		225,1,0,0,0,227,228,1,0,0,0,228,269,1,0,0,0,229,231,5,7,0,0,230,229,1,
		0,0,0,230,231,1,0,0,0,231,233,1,0,0,0,232,234,3,2,1,0,233,232,1,0,0,0,
		234,235,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,238,1,0,0,0,237,239,
		5,4,0,0,238,237,1,0,0,0,239,240,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,
		0,241,242,1,0,0,0,242,244,5,3,0,0,243,245,5,5,0,0,244,243,1,0,0,0,245,
		246,1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,269,1,0,0,0,248,250,5,
		7,0,0,249,248,1,0,0,0,249,250,1,0,0,0,250,252,1,0,0,0,251,253,3,2,1,0,
		252,251,1,0,0,0,253,254,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,257,
		1,0,0,0,256,258,5,4,0,0,257,256,1,0,0,0,258,259,1,0,0,0,259,257,1,0,0,
		0,259,260,1,0,0,0,260,262,1,0,0,0,261,263,5,5,0,0,262,261,1,0,0,0,263,
		264,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,266,1,0,0,0,266,267,5,
		3,0,0,267,269,1,0,0,0,268,22,1,0,0,0,268,33,1,0,0,0,268,46,1,0,0,0,268,
		59,1,0,0,0,268,74,1,0,0,0,268,88,1,0,0,0,268,103,1,0,0,0,268,117,1,0,0,
		0,268,135,1,0,0,0,268,153,1,0,0,0,268,172,1,0,0,0,268,191,1,0,0,0,268,
		211,1,0,0,0,268,230,1,0,0,0,268,249,1,0,0,0,269,5,1,0,0,0,270,271,3,4,
		2,0,271,272,3,0,0,0,272,273,3,10,5,0,273,274,5,10,0,0,274,290,1,0,0,0,
		275,276,3,4,2,0,276,277,3,0,0,0,277,278,3,4,2,0,278,279,5,10,0,0,279,290,
		1,0,0,0,280,281,3,4,2,0,281,282,3,0,0,0,282,283,3,6,3,0,283,284,5,10,0,
		0,284,290,1,0,0,0,285,286,3,4,2,0,286,287,3,0,0,0,287,288,5,10,0,0,288,
		290,1,0,0,0,289,270,1,0,0,0,289,275,1,0,0,0,289,280,1,0,0,0,289,285,1,
		0,0,0,290,7,1,0,0,0,291,292,3,4,2,0,292,293,5,9,0,0,293,299,1,0,0,0,294,
		296,3,6,3,0,295,297,5,9,0,0,296,295,1,0,0,0,296,297,1,0,0,0,297,299,1,
		0,0,0,298,291,1,0,0,0,298,294,1,0,0,0,299,9,1,0,0,0,300,302,3,8,4,0,301,
		300,1,0,0,0,302,303,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,305,1,
		0,0,0,305,306,3,4,2,0,306,315,1,0,0,0,307,309,3,8,4,0,308,307,1,0,0,0,
		309,310,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,312,1,0,0,0,312,313,
		3,6,3,0,313,315,1,0,0,0,314,301,1,0,0,0,314,308,1,0,0,0,315,11,1,0,0,0,
		316,318,3,6,3,0,317,316,1,0,0,0,318,319,1,0,0,0,319,317,1,0,0,0,319,320,
		1,0,0,0,320,321,1,0,0,0,321,322,3,6,3,0,322,13,1,0,0,0,323,324,3,12,6,
		0,324,325,5,0,0,1,325,330,1,0,0,0,326,327,3,6,3,0,327,328,5,0,0,1,328,
		330,1,0,0,0,329,323,1,0,0,0,329,326,1,0,0,0,330,15,1,0,0,0,62,22,27,30,
		33,38,43,46,51,56,59,64,69,74,79,85,88,93,98,103,108,114,117,122,127,132,
		135,140,145,150,153,158,164,169,172,177,182,188,191,196,201,206,211,216,
		222,227,230,235,240,246,249,254,259,264,268,289,296,298,303,310,314,319,
		329
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
